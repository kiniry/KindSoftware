java: THEORY
BEGIN
  IMPORTING strings

  nominal_modules: TYPE+ = [# name: string #]
  classes: TYPE = nominal_modules WITH [# type_parameters: set[nominal_modules],
                                          abstract?: boolean,
                                          final?: boolean #]
  interfaces: TYPE = nominal_modules WITH [# type_parameters: set[nominal_modules] #]

  java_types: NONEMPTY_TYPE
  reference_types: TYPE+ FROM java_types
  primitive_types: TYPE+ = { byte, short, int, long, float, double, boolean }

  exceptions: TYPE+ FROM classes

  variables: TYPE+ = [# java_type: java_types, name: string #]
  visibility_modifiers: TYPE+ = { public, protected, private, package }
  java_field_modifiers: TYPE+ = { static, final, transient, volatile }
  % @todo jrk Need we model abstract classes and methods? - 1 June 2010
  % class_or_method_modifiers: TYPE+ = { abstract }
  formal_parameter: TYPE+ = [# final?: boolean, definition: variables #]

  fields: TYPE+ = [# visibility: visibility_modifiers,
                     java_modifiers: set[java_field_modifiers],
                     definition: variables,
                     class: nominal_modules #]
  formal_parameters: TYPE+ = list[formal_parameter]
  signature: TYPE = [# name: string, arguments: formal_parameters #]
  methods: TYPE = [# visibility: visibility_modifiers,
                     final?: boolean,
                     static?: boolean,
                     abstract?: boolean,
                     return_type: java_types,
                     sig: signature,
                     module: nominal_modules,
                     overrides: lift[nominal_modules], % overrides is bottom if this method is non-overriding
                     implements: set[interfaces],
                     throws: set[exceptions] #]

  m: VAR methods
  % if module is an interface the implements must be empty.
  method_wellformedness: AXIOM (FORALL(m: methods): (EXISTS(i: interfaces): m`module`name = i`name) IMPLIES
                                                    empty?(m`implements))

  fields: [classes -> set[fields]]
  methods: [classes -> set[methods]]
  fields: [interfaces -> set[fields]]
  methods: [interfaces -> set[methods]]

  inputs: TYPE+
  outputs: TYPE+

END java

java_inheritance_semantics [T: TYPE]: THEORY
BEGIN
  IMPORTING java, relations[T]

  t, u: T

  extends: [T -> set[T]]
  inherit_from: [T, T -> bool]

  inherit_from_semantics: AXIOM reflexive?(inherit_from) AND
                                antisymmetric?(inherit_from) AND
                                transitive?(inherit_from)
  extends_induces_inherit_from: AXIOM extends(t) = u => inherit_from(t, u)

  extends_semantics: AXIOM empty?(extends(t)) OR singleton?(extends(t))

END java_inheritance_semantics

java_semantics: THEORY
BEGIN
  IMPORTING java, java_inheritance_semantics[classes], java_inheritance_semantics[interfaces]

  c: classes
  i, j: interfaces
  s: set[interfaces]

  implements: [classes -> set[interfaces]]
  implements_is_the_transitive_closure_of_extends_on_interfaces: AXIOM
    implements(c) = s AND member(i, s) AND extends(i) = j => 
      NOT empty?(j) IMPLIES member(epsilon(j), s)

  java_lang_Object: classes = (# name := "java.lang.Object",
                                 type_parameters := emptyset,
                                 abstract? := false, final? := false #)
  classes_extends_codomain_is_cardinality_zero_or_one: AXIOM Card(extends(c)) <= 1
  only_object_extends_nothing: AXIOM extends(c) = emptyset <=> c = java_lang_Object

  null: reference_types

  java_lang_Object_is_the_top_class: AXIOM inherit_from(c, java_lang_Object)

  java_lang_Throwable, java_lang_Error, java_lang_Exception: classes

  Throwable_extends_Object: AXIOM extends(java_lang_Throwable) = java_lang_Object
  Error_extends_Throwable: AXIOM extends(java_lang_Error) = java_lang_Throwable
  Exception_extends_Throwable: AXIOM extends(java_lang_Exception) = java_lang_Throwable

  java_lang_Runnable: interfaces = (# name := "java.lang.Runnable",
                                      type_parameters := emptyset #)
  java_lang_Thread: classes = (# name := "java.lang.Thread",
                                 type_parameters := emptyset,
                                 abstract? := false, final? := false #)
  Thread_extends_Object: AXIOM extends(java_lang_Thread) = java_lang_Object

  all_interface_fields_are_public: AXIOM
    (FORALL (i: interfaces):
       (FORALL (f: fields): member(f, fields(i)) =>
         f`visibility = public))
  all_interface_fields_are_static_final: AXIOM
    (FORALL (i: interfaces):
       (FORALL (f: fields): member(f, fields(i)) =>
         member(final, f`java_modifiers) AND member(static, f`java_modifiers)))
  all_interface_methods_are_public: AXIOM
    (FORALL (i: interfaces):
       (FORALL (m: methods): member(m, methods(i)) =>
         m`visibility = public))

END java_semantics
