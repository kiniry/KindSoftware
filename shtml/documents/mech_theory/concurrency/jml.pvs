jml: THEORY
BEGIN
  IMPORTING java_semantics

  preconditions: TYPE+ = bool
  minmax_frames: TYPE+ = { everything, nothing }
  frame_axioms: TYPE+ = [set[fields] + minmax_frames]
  normal_postconditions: TYPE+ = bool
  exceptional_postcondition: TYPE+ = [# exception: exceptions, post: bool #]

  invariants: TYPE+ = [# visibility: visibility_modifiers, assertion: bool #]
  constraints: TYPE+ = [# visibility: visibility_modifiers, assertion: bool #]
  initially_clauses: TYPE+ = [# visibility: visibility_modifiers, assertion: bool #]

  jml_method_modifiers: TYPE+ = { pure }
  jml_methods: TYPE = methods WITH [# jml_modifiers: set[jml_method_modifiers] #]

  ghost_fields: TYPE+ = set[fields]
  model_fields: TYPE+ = set[fields]
  model_methods: TYPE+ = set[methods]

  datagroups: TYPE+ = [ set[fields], set[model_fields] ]
  represents: [fields, model_fields -> bool]
  nullable?: [reference_types -> bool]

  contracts: TYPE+ = [# visibility: visibility_modifiers,
                        pre: preconditions,
                        frame: frame_axioms,
                        post: normal_postconditions, 
                        ex_post: set[exceptional_postcondition] #]
  normal_behaviors: TYPE+ = { c: contracts | empty?(c`ex_post) }
  exceptional_behaviors: TYPE+ = { c: contracts | empty?(c`post) }
  behaviors: TYPE+ = contracts

  contract: [jml_methods -> contracts]
  invariant: [nominal_modules -> set[invariants]]
  contraint: [nominal_modules -> set[constraints]]
  initially: [nominal_modules -> set[initially_clauses]]

  model_fields_of_class: [classes -> set[model_fields]]
  model_methods_of_class: [classes -> set[model_methods]]
  ghost_fields_of_class: [classes -> set[ghost_fields]]
  model_fields_of_interface: [interfaces -> set[model_fields]]
  model_methods_of_interface: [interfaces -> set[model_methods]]
  ghost_fields_of_interface: [interfaces -> set[ghost_fields]]

  pure_means_modifies_nothing: AXIOM
    (FORALL (m: jml_methods): (m`jml_modifiers = pure) => (OUT_2(contract(m)`frame) = nothing))

END jml
